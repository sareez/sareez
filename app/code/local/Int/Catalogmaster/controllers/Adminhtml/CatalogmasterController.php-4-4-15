<?php

class Int_Catalogmaster_Adminhtml_CatalogmasterController extends Mage_Adminhtml_Controller_action
{

	protected function _initAction() {
		$this->loadLayout()
			->_setActiveMenu('catalogmaster/items')
			->_addBreadcrumb(Mage::helper('adminhtml')->__('Items Manager'), Mage::helper('adminhtml')->__('Item Manager'));
		
		return $this;
	}   
 
	public function indexAction() {
		$this->_initAction()
			->renderLayout();
	}

	public function editAction() {
		$id     = $this->getRequest()->getParam('id');
		$model  = Mage::getModel('catalogmaster/catalogmaster')->load($id);

		if ($model->getId() || $id == 0) {
			$data = Mage::getSingleton('adminhtml/session')->getFormData(true);
			if (!empty($data)) {
				$model->setData($data);
			}

			Mage::register('catalogmaster_data', $model);

			$this->loadLayout();
			$this->_setActiveMenu('catalogmaster/items');

			$this->_addBreadcrumb(Mage::helper('adminhtml')->__('Item Manager'), Mage::helper('adminhtml')->__('Item Manager'));
			$this->_addBreadcrumb(Mage::helper('adminhtml')->__('Item News'), Mage::helper('adminhtml')->__('Item News'));

			$this->getLayout()->getBlock('head')->setCanLoadExtJs(true);

			$this->_addContent($this->getLayout()->createBlock('catalogmaster/adminhtml_catalogmaster_edit'))
				->_addLeft($this->getLayout()->createBlock('catalogmaster/adminhtml_catalogmaster_edit_tabs'));

			$this->renderLayout();
		} else {
			Mage::getSingleton('adminhtml/session')->addError(Mage::helper('catalogmaster')->__('Item does not exist'));
			$this->_redirect('*/*/');
		}
	}
 
	public function newAction() {
		$this->_forward('edit');
	}
 
	public function saveAction() {
		if ($data = $this->getRequest()->getPost()) {
			 
			 
			$adminuser = Mage::getSingleton('admin/session');
			$adminuserid = $adminuser->getUser()->getUserId();			
			$data['user_id'] = $adminuserid;
				
			$model = Mage::getModel('catalogmaster/catalogmaster');		
			$model->setData($data)
				->setId($this->getRequest()->getParam('id'));
				
			$id = 	$this->getRequest()->getParam('id');
			
			try {
				if ($model->getCreatedTime == NULL || $model->getUpdateTime() == NULL) {
					$model->setCreatedTime(now())
						->setUpdateTime(now());
				} else {
					$model->setUpdateTime(now());
				}			
				
				//print_r($model);
				
				$model->save();
				
				$item_id = $model->getId();
				
				$manu_id = $model->getManufacturer_id();
				
				$product_type = $model->getProducts_type();
				
				
				//exit;
				/* Create products for the catalog */
				
		  
			if(!isset($id))
			{
			
			$no_of_products = $data['no_of_products'];
			 for($i = 1; $i<=$no_of_products ; $i++)
			  { 
			$six_digit_random_number = mt_rand(100000, 999999);
			try{
			//create new product
			$newProduct = new Mage_Catalog_Model_Product();
			$newProduct->setAttributeSetId(4)
				->setTypeId('simple')
				->setVisibility(Mage_Catalog_Model_Product_Visibility::VISIBILITY_NOT_VISIBLE)
				->setTaxClassId(0)
				->setCreatedAt(strtotime('now'))
				->setName('test')
				->setSku($manu_id.'-'.$item_id.$product_type.$six_digit_random_number)
				->setWeight(0)
				->setStatus(Mage_Catalog_Model_Product_Status::STATUS_ENABLED)
				->setPrice(0)
				->setCategoryIds(array(3))
				->setWebsiteIds(array(1))
				->setDescription('')
				->setShortDescription('')				
				->setMetaTitle('')
				->setMetaKeyword('')
				->setMetaDescription('')
				->setCatalogmasterId($item_id)
				->setManufacturers_id($manu_id)
				->setStockData(
				array( 
				'is_in_stock' => 1, 
				'qty' => 0 
				))
				;
			$newProduct->save();                
			}catch(Exception $e){
				$result['status'] = 3;
				$result['message'] = 'There is an ERROR happened! NOT ALL products are created! Error:'.$e->getMessage();
				echo json_encode($result);
				return;
			}
			
			  }  //end for 
			
			}	
		/* End Create products for the catalog */
				
				Mage::getSingleton('adminhtml/session')->addSuccess(Mage::helper('catalogmaster')->__('Item was successfully saved'));
				Mage::getSingleton('adminhtml/session')->setFormData(false);

				if ($this->getRequest()->getParam('back')) {
					$this->_redirect('*/*/edit', array('id' => $model->getId()));
					return;
				}
				$this->_redirect('*/*/');
				return;
            } catch (Exception $e) {
                Mage::getSingleton('adminhtml/session')->addError($e->getMessage());
                Mage::getSingleton('adminhtml/session')->setFormData($data);
                $this->_redirect('*/*/edit', array('id' => $this->getRequest()->getParam('id')));
                return;
            }
        }
        Mage::getSingleton('adminhtml/session')->addError(Mage::helper('catalogmaster')->__('Unable to find item to save'));
        $this->_redirect('*/*/');
	}
 
	public function deleteAction() {
		if( $this->getRequest()->getParam('id') > 0 ) {
			try {
				$model = Mage::getModel('catalogmaster/catalogmaster');
				 
				$model->setId($this->getRequest()->getParam('id'))
					->delete();
					 
				Mage::getSingleton('adminhtml/session')->addSuccess(Mage::helper('adminhtml')->__('Item was successfully deleted'));
				$this->_redirect('*/*/');
			} catch (Exception $e) {
				Mage::getSingleton('adminhtml/session')->addError($e->getMessage());
				$this->_redirect('*/*/edit', array('id' => $this->getRequest()->getParam('id')));
			}
		}
		$this->_redirect('*/*/');
	}

    public function massDeleteAction() {
        $catalogmasterIds = $this->getRequest()->getParam('catalogmaster');
        if(!is_array($catalogmasterIds)) {
			Mage::getSingleton('adminhtml/session')->addError(Mage::helper('adminhtml')->__('Please select item(s)'));
        } else {
            try {
                foreach ($catalogmasterIds as $catalogmasterId) {
                    $catalogmaster = Mage::getModel('catalogmaster/catalogmaster')->load($catalogmasterId);
                    $catalogmaster->delete();
                }
                Mage::getSingleton('adminhtml/session')->addSuccess(
                    Mage::helper('adminhtml')->__(
                        'Total of %d record(s) were successfully deleted', count($catalogmasterIds)
                    )
                );
            } catch (Exception $e) {
                Mage::getSingleton('adminhtml/session')->addError($e->getMessage());
            }
        }
        $this->_redirect('*/*/index');
    }
	
    public function massStatusAction()
    {
        $catalogmasterIds = $this->getRequest()->getParam('catalogmaster');
        if(!is_array($catalogmasterIds)) {
            Mage::getSingleton('adminhtml/session')->addError($this->__('Please select item(s)'));
        } else {
            try {
                foreach ($catalogmasterIds as $catalogmasterId) {
                    $catalogmaster = Mage::getSingleton('catalogmaster/catalogmaster')
                        ->load($catalogmasterId)
                        ->setStatus($this->getRequest()->getParam('status'))
                        ->setIsMassupdate(true)
                        ->save();
                }
                $this->_getSession()->addSuccess(
                    $this->__('Total of %d record(s) were successfully updated', count($catalogmasterIds))
                );
            } catch (Exception $e) {
                $this->_getSession()->addError($e->getMessage());
            }
        }
        $this->_redirect('*/*/index');
    }
  
    public function exportCsvAction()
    {
        $fileName   = 'catalogmaster.csv';
        $content    = $this->getLayout()->createBlock('catalogmaster/adminhtml_catalogmaster_grid')
            ->getCsv();

        $this->_sendUploadResponse($fileName, $content);
    }
    
    
     public function getcatalogdropdownAction()
	{
	$manufacturer_id = $this->getRequest()->getParam('id');
	$str='';
	$catalogmastercollection = Mage::getModel('catalogmaster/catalogmaster')->getCollection()
								->addFieldToSelect('catalog_id')
								->addFieldToSelect('catalog_name')								
								->addFieldToFilter('manufacturer_id', $manufacturer_id)
								//->addFieldToFilter('process_status', 1)
								->getData();			
								
	$producttype_array = array();
	$count =1;
	
	$str = "<select name='catalogmasters_id' onchange='setcatalogmaster_id(this.value)' id='productGrid_filter_catalogmasters_id'>";
	  	$str .= "<option value=''> Please Select  Catalog</option>";
		foreach($catalogmastercollection as $catalogmaster)
		{
		$catalogmaster['catalogmaster_id'];
		$catalogmaster['catalog_name'];
		$str .= "<option value='".$catalogmaster['catalogmaster_id']."'>";
		$str .= $catalogmaster['catalog_name'];
		$str .= "</option>";
		$count++;
		}
	$str .= "</select>";
	echo $str ;
	}

    public function exportXmlAction()
    {
        $fileName   = 'catalogmaster.xml';
        $content    = $this->getLayout()->createBlock('catalogmaster/adminhtml_catalogmaster_grid')
            ->getXml();

        $this->_sendUploadResponse($fileName, $content);
    }

    protected function _sendUploadResponse($fileName, $content, $contentType='application/octet-stream')
    {
        $response = $this->getResponse();
        $response->setHeader('HTTP/1.1 200 OK','');
        $response->setHeader('Pragma', 'public', true);
        $response->setHeader('Cache-Control', 'must-revalidate, post-check=0, pre-check=0', true);
        $response->setHeader('Content-Disposition', 'attachment; filename='.$fileName);
        $response->setHeader('Last-Modified', date('r'));
        $response->setHeader('Accept-Ranges', 'bytes');
        $response->setHeader('Content-Length', strlen($content));
        $response->setHeader('Content-type', $contentType);
        $response->setBody($content);
        $response->sendResponse();
        die;
    }
}